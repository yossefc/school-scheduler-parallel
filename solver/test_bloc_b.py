#!/usr/bin/env python3
"""
Test du Bloc B - Groupes parall√®les et r√©unions professeurs
V√©rifie que le solver peut g√©rer :
1. Les cours parall√®les (m√™me mati√®re, m√™me moment, classes diff√©rentes)
2. Les r√©unions professeurs (bloquent le prof mais pas de classe)
"""

import logging
from solver_engine import ScheduleSolver
import psycopg2
from psycopg2.extras import RealDictCursor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_test_data():
    """Cr√©e des donn√©es de test pour valider le Bloc B."""
    
    # Configuration de test - adapter selon votre environnement
    db_config = {
        "host": "localhost",  # ou "postgres" si Docker
        "database": "school_scheduler", 
        "user": "admin",
        "password": "school123",
    }
    
    try:
        conn = psycopg2.connect(**db_config)
        cur = conn.cursor()
        
        logger.info("Nettoyage des donn√©es de test...")
        
        # Nettoyer les donn√©es existantes
        cur.execute("DELETE FROM teacher_load WHERE teacher_name LIKE 'TEST_%'")
        cur.execute("DELETE FROM parallel_groups WHERE subject LIKE 'TEST_%'")
        cur.execute("DELETE FROM teachers WHERE teacher_name LIKE 'TEST_%'")
        cur.execute("DELETE FROM classes WHERE class_name LIKE 'TEST_%'")
        
        # Cr√©er des professeurs de test
        test_teachers = [
            ("TEST_Prof_Math", 18, "0,1,2,3,4"),
            ("TEST_Prof_Hebreu", 20, "0,1,2,3,4"),
            ("TEST_Prof_Directeur", 5, "0,1,2,3,4")
        ]
        
        for name, hours, days in test_teachers:
            cur.execute(
                "INSERT INTO teachers (teacher_name, total_hours, work_days) VALUES (%s, %s, %s)",
                (name, hours, days)
            )
        
        # Cr√©er des classes de test
        test_classes = [
            ("TEST_7A", 7, "A"),
            ("TEST_7B", 7, "B"),
            ("TEST_8A", 8, "A")
        ]
        
        for class_name, grade, section in test_classes:
            cur.execute(
                "INSERT INTO classes (class_name, grade, section, student_count) VALUES (%s, %s, %s, %s)",
                (class_name, grade, section, 25)
            )
        
        # Charges d'enseignement normales
        normal_loads = [
            ("TEST_Prof_Math", "TEST_Maths", "7", "TEST_7A", 4),
            ("TEST_Prof_Hebreu", "TEST_Hebreu", "7", "TEST_7A,TEST_7B", 6),
        ]
        
        for teacher, subject, grade, classes, hours in normal_loads:
            cur.execute(
                "INSERT INTO teacher_load (teacher_name, subject, grade, class_list, hours) VALUES (%s, %s, %s, %s, %s)",
                (teacher, subject, grade, classes, hours)
            )
        
        # R√©unions professeurs (pas de class_list)
        meeting_loads = [
            ("TEST_Prof_Directeur", "TEST_Reunion_Pedagogique", "ALL", None, 2),
            ("TEST_Prof_Math", "TEST_Conseil_Classe", "7", None, 1),
        ]
        
        for teacher, subject, grade, classes, hours in meeting_loads:
            cur.execute(
                "INSERT INTO teacher_load (teacher_name, subject, grade, class_list, hours) VALUES (%s, %s, %s, %s, %s)",
                (teacher, subject, grade, classes, hours)
            )
        
        # Groupe parall√®le (m√™me prof enseigne √† 2 classes en m√™me temps)
        cur.execute(
            """INSERT INTO parallel_groups (subject, grade, teachers, class_lists) 
               VALUES (%s, %s, %s, %s)""",
            ("TEST_Sport", "7", "TEST_Prof_Sport", "TEST_7A,TEST_7B")
        )
        
        conn.commit()
        logger.info("‚úÖ Donn√©es de test cr√©√©es avec succ√®s !")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation des donn√©es de test : {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()


def test_solver_with_bloc_b():
    """Test le solver avec les fonctionnalit√©s du Bloc B."""
    
    logger.info("üîç Test du Bloc B - Groupes parall√®les et r√©unions...")
    
    try:
        # Cr√©er une instance du solver
        solver = ScheduleSolver()
        
        # Charger les donn√©es (incluant les nouvelles fonctionnalit√©s)
        logger.info("Chargement des donn√©es...")
        solver.load_data_from_db()
        
        # V√©rifier que les nouvelles donn√©es sont charg√©es
        logger.info(f"Parallel groups charg√©s : {len(solver.parallel_groups)}")
        logger.info(f"Teacher loads charg√©s : {len(solver.teacher_loads)}")
        
        # V√©rifier la pr√©sence de r√©unions (class_list = None)
        meeting_loads = [load for load in solver.teacher_loads if not load.get("class_list")]
        logger.info(f"R√©unions trouv√©es : {len(meeting_loads)}")
        
        for meeting in meeting_loads:
            logger.info(f"  - {meeting['teacher_name']} : {meeting['subject']}")
        
        # Test de cr√©ation des variables (doit inclure _MEETING)
        logger.info("Cr√©ation des variables...")
        solver.create_variables()
        
        # V√©rifier la pr√©sence de variables _MEETING
        meeting_vars = [name for name in solver.schedule_vars.keys() if "_MEETING_" in name]
        logger.info(f"Variables _MEETING cr√©√©es : {len(meeting_vars)}")
        
        if meeting_vars:
            logger.info(f"Exemple : {meeting_vars[0]}")
        
        # Test des contraintes (doit inclure les contraintes parall√®les)
        logger.info("Ajout des contraintes...")
        solver.add_hard_constraints()
        
        logger.info("‚úÖ Test du Bloc B r√©ussi !")
        logger.info("Le solver peut maintenant g√©rer :")
        logger.info("  - Les groupes parall√®les")
        logger.info("  - Les r√©unions professeurs sans classe")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test : {e}")
        import traceback
        traceback.print_exc()
        return False


def cleanup_test_data():
    """Nettoie les donn√©es de test."""
    # Configuration de test
    db_config = {
        "host": "localhost",
        "database": "school_scheduler", 
        "user": "admin",
        "password": "school123",
    }
    
    try:
        conn = psycopg2.connect(**db_config)
        cur = conn.cursor()
        
        logger.info("Nettoyage des donn√©es de test...")
        
        cur.execute("DELETE FROM teacher_load WHERE teacher_name LIKE 'TEST_%'")
        cur.execute("DELETE FROM parallel_groups WHERE subject LIKE 'TEST_%'")
        cur.execute("DELETE FROM teachers WHERE teacher_name LIKE 'TEST_%'")
        cur.execute("DELETE FROM classes WHERE class_name LIKE 'TEST_%'")
        
        conn.commit()
        logger.info("‚úÖ Donn√©es de test supprim√©es")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du nettoyage : {e}")
    finally:
        if 'conn' in locals():
            conn.close()


if __name__ == "__main__":
    print("üß™ Test des fonctionnalit√©s du Bloc B")
    print("=" * 50)
    
    # 1. Cr√©er les donn√©es de test
    if create_test_data():
        # 2. Tester le solver
        if test_solver_with_bloc_b():
            print("\nüéâ Tous les tests sont pass√©s !")
        else:
            print("\n‚ùå Certains tests ont √©chou√©.")
    else:
        print("\n‚ùå Impossible de cr√©er les donn√©es de test.")
    
    # 3. Nettoyer (optionnel)
    # cleanup_test_data()
    
    print("\nPour nettoyer les donn√©es de test :")
    print("python test_bloc_b.py && python -c \"from test_bloc_b import cleanup_test_data; cleanup_test_data()\"") 