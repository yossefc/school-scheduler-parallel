#!/usr/bin/env python3
"""
pedagogical_analyzer.py - Analyseur p√©dagogique automatique avec r√®gles strictes
Analyse un emploi du temps et l'am√©liore it√©rativement jusqu'√† la perfection
"""
import logging
import json
from typing import Dict, List, Any, Optional, Tuple
from collections import defaultdict, Counter
from datetime import datetime
import psycopg2
from psycopg2.extras import RealDictCursor
from incremental_scheduler import IncrementalScheduler

logger = logging.getLogger(__name__)

class PedagogicalAnalyzer:
    """
    Analyseur p√©dagogique avec r√®gles strictes :
    - 0 trous dans l'emploi du temps
    - Blocs de 2-3h pour les mati√®res principales 
    - Mati√®res group√©es par jour
    - Optimisation automatique jusqu'√† perfection
    """
    
    def __init__(self, db_config: Dict[str, Any]):
        self.db_config = db_config
        self.scheduler = IncrementalScheduler(db_config)
        self.current_schedule_id = None
        self.analysis_log = []
        self.improvements_made = []
        self.questions_asked = []
        
        # R√®gles p√©dagogiques strictes
        self.PEDAGOGICAL_RULES = {
            'max_gaps_allowed': 0,  # Z√âRO trous autoris√©s
            'min_block_size': 2,    # Minimum 2h cons√©cutives
            'preferred_block_size': 3,  # Pr√©f√©rer 3h cons√©cutives
            'max_subjects_per_day': 4,  # Maximum 4 mati√®res diff√©rentes par jour
            'min_daily_hours': 5,   # Minimum 5h de cours par jour
            'max_daily_hours': 8,   # Maximum 8h de cours par jour
            'core_subjects': [      # Mati√®res principales qui doivent avoir des blocs
                '◊û◊™◊û◊ò◊ô◊ß◊î', '◊ê◊†◊í◊ú◊ô◊™', '◊¢◊ë◊®◊ô◊™', '◊û◊ì◊¢◊ô◊ù', '◊î◊ô◊°◊ò◊ï◊®◊ô◊î', 
                '◊í◊ô◊ê◊ï◊í◊®◊§◊ô◊î', '◊ë◊ô◊ï◊ú◊ï◊í◊ô◊î', '◊õ◊ô◊û◊ô◊î', '◊§◊ô◊ñ◊ô◊ß◊î'
            ]
        }
        
    def analyze_full_schedule(self, schedule_id: Optional[int] = None) -> Dict[str, Any]:
        """
        Analyse compl√®te d'un emploi du temps avec toutes les r√®gles p√©dagogiques
        """
        logger.info("üîç D√âBUT D'ANALYSE P√âDAGOGIQUE COMPL√àTE")
        
        # Charger l'emploi du temps
        load_result = self.scheduler.load_existing_schedule(schedule_id)
        if not load_result['success']:
            return {"success": False, "error": load_result['error']}
        
        self.current_schedule_id = load_result['schedule_id']
        schedule_entries = self.scheduler.schedule_entries
        
        # Organiser les donn√©es par classe et jour
        schedule_by_class = self._organize_schedule_by_class(schedule_entries)
        
        # Analyses d√©taill√©es
        analysis_results = {
            'schedule_id': self.current_schedule_id,
            'total_entries': len(schedule_entries),
            'analysis_timestamp': datetime.now().isoformat(),
            'classes_analyzed': len(schedule_by_class),
            'issues_found': [],
            'pedagogical_score': 0,
            'recommendations': [],
            'critical_problems': [],
            'optimization_potential': []
        }
        
        total_score = 0
        max_possible_score = 0
        
        # Analyser chaque classe
        for class_name, class_schedule in schedule_by_class.items():
            logger.info(f"üìö Analyse de la classe {class_name}")
            
            class_analysis = self._analyze_class_schedule(class_name, class_schedule)
            analysis_results['issues_found'].extend(class_analysis['issues'])
            
            # Calculer le score p√©dagogique
            class_score = class_analysis['pedagogical_score']
            total_score += class_score
            max_possible_score += 100
            
            if class_score < 70:  # Score critique
                analysis_results['critical_problems'].append({
                    'class': class_name,
                    'score': class_score,
                    'main_issues': class_analysis['main_issues']
                })
            
            # Ajouter les recommandations sp√©cifiques √† cette classe
            for recommendation in class_analysis['recommendations']:
                recommendation['class'] = class_name
                analysis_results['recommendations'].append(recommendation)
        
        # Score global
        analysis_results['pedagogical_score'] = round(total_score / max_possible_score * 100) if max_possible_score > 0 else 0
        
        # Analyse transversale
        cross_analysis = self._analyze_cross_class_issues(schedule_entries)
        analysis_results['issues_found'].extend(cross_analysis['issues'])
        analysis_results['recommendations'].extend(cross_analysis['recommendations'])
        
        # Classification des probl√®mes par priorit√©
        analysis_results = self._classify_issues_by_priority(analysis_results)
        
        logger.info(f"üìä Analyse termin√©e - Score p√©dagogique: {analysis_results['pedagogical_score']}/100")
        logger.info(f"   {len(analysis_results['issues_found'])} probl√®mes d√©tect√©s")
        logger.info(f"   {len(analysis_results['critical_problems'])} probl√®mes critiques")
        
        self.analysis_log.append(analysis_results)
        return analysis_results
    
    def _organize_schedule_by_class(self, entries: List[Dict]) -> Dict[str, Dict]:
        """Organise l'emploi du temps par classe et par jour"""
        schedule_by_class = defaultdict(lambda: defaultdict(list))
        
        for entry in entries:
            class_name = entry['class_name']
            day = entry['day_of_week']
            
            schedule_by_class[class_name][day].append({
                'slot_index': entry['slot_index'],
                'subject': entry['subject'],
                'teachers': entry['teacher_names'] if isinstance(entry['teacher_names'], list) else [entry['teacher_names']],
                'kind': entry.get('kind', 'individual'),
                'entry_id': entry.get('entry_id')
            })
        
        # Trier par slot_index pour chaque jour
        for class_name in schedule_by_class:
            for day in schedule_by_class[class_name]:
                schedule_by_class[class_name][day].sort(key=lambda x: x['slot_index'])
        
        return dict(schedule_by_class)
    
    def _analyze_class_schedule(self, class_name: str, class_schedule: Dict) -> Dict[str, Any]:
        """Analyse approfondie de l'emploi du temps d'une classe"""
        issues = []
        recommendations = []
        main_issues = []
        scores = {}
        
        total_hours = 0
        total_gaps = 0
        subjects_distribution = defaultdict(list)
        daily_hours = []
        
        # Analyser chaque jour
        for day, day_schedule in class_schedule.items():
            if not day_schedule:
                continue
                
            # Calculer les statistiques du jour
            day_hours = len(day_schedule)
            total_hours += day_hours
            daily_hours.append(day_hours)
            
            # D√©tecter les trous dans la journ√©e
            slots = [entry['slot_index'] for entry in day_schedule]
            if slots:
                slots.sort()
                day_gaps = 0
                for i in range(slots[0], slots[-1]):
                    if i not in slots:
                        day_gaps += 1
                        total_gaps += 1
                        issues.append({
                            'type': 'gap',
                            'severity': 'critical',
                            'day': day,
                            'slot': i,
                            'message': f'Trou d√©tect√© jour {day+1} p√©riode {i+1}'
                        })
                
                if day_gaps > 0:
                    main_issues.append(f'{day_gaps} trous jour {day+1}')
            
            # Analyser la r√©partition des mati√®res
            day_subjects = [entry['subject'] for entry in day_schedule]
            unique_subjects = set(day_subjects)
            
            if len(unique_subjects) > self.PEDAGOGICAL_RULES['max_subjects_per_day']:
                issues.append({
                    'type': 'too_many_subjects',
                    'severity': 'warning',
                    'day': day,
                    'count': len(unique_subjects),
                    'subjects': list(unique_subjects),
                    'message': f'Trop de mati√®res diff√©rentes ({len(unique_subjects)}) jour {day+1}'
                })
            
            # Analyser les blocs de mati√®res
            blocks = self._detect_subject_blocks(day_schedule)
            for subject, block_sizes in blocks.items():
                subjects_distribution[subject].extend(block_sizes)
                
                # V√©rifier si les mati√®res principales ont des blocs suffisants
                if subject in self.PEDAGOGICAL_RULES['core_subjects']:
                    max_block = max(block_sizes) if block_sizes else 0
                    if max_block < self.PEDAGOGICAL_RULES['min_block_size']:
                        issues.append({
                            'type': 'insufficient_block',
                            'severity': 'high',
                            'subject': subject,
                            'day': day,
                            'max_block': max_block,
                            'message': f'{subject} n\'a que {max_block}h cons√©cutives (minimum {self.PEDAGOGICAL_RULES["min_block_size"]}h)'
                        })
                        main_issues.append(f'{subject} fragment√©')
            
            # V√©rifier la charge quotidienne
            if day_hours < self.PEDAGOGICAL_RULES['min_daily_hours']:
                issues.append({
                    'type': 'insufficient_daily_hours',
                    'severity': 'medium',
                    'day': day,
                    'hours': day_hours,
                    'message': f'Seulement {day_hours}h de cours jour {day+1} (minimum {self.PEDAGOGICAL_RULES["min_daily_hours"]}h)'
                })
            elif day_hours > self.PEDAGOGICAL_RULES['max_daily_hours']:
                issues.append({
                    'type': 'excessive_daily_hours',
                    'severity': 'high',
                    'day': day,
                    'hours': day_hours,
                    'message': f'{day_hours}h de cours jour {day+1} (maximum {self.PEDAGOGICAL_RULES["max_daily_hours"]}h)'
                })
        
        # Calcul du score p√©dagogique
        scores['gaps_score'] = max(0, 100 - (total_gaps * 25))  # -25 points par trou
        scores['blocks_score'] = self._calculate_blocks_score(subjects_distribution)
        scores['distribution_score'] = self._calculate_distribution_score(daily_hours)
        scores['subjects_score'] = self._calculate_subjects_score(subjects_distribution)
        
        pedagogical_score = sum(scores.values()) / len(scores)
        
        # G√©n√©rer des recommandations
        if total_gaps > 0:
            recommendations.append({
                'type': 'eliminate_gaps',
                'priority': 1,
                'action': 'move_courses',
                'description': f'√âliminer les {total_gaps} trous en regroupant les cours',
                'automated_fix': True
            })
        
        for subject, blocks in subjects_distribution.items():
            if subject in self.PEDAGOGICAL_RULES['core_subjects']:
                if not any(block >= self.PEDAGOGICAL_RULES['min_block_size'] for block in blocks):
                    recommendations.append({
                        'type': 'create_blocks',
                        'priority': 2,
                        'subject': subject,
                        'action': 'group_consecutive_slots',
                        'description': f'Regrouper les heures de {subject} en blocs de 2-3h',
                        'automated_fix': True
                    })
        
        return {
            'class_name': class_name,
            'total_hours': total_hours,
            'total_gaps': total_gaps,
            'pedagogical_score': round(pedagogical_score),
            'scores_detail': scores,
            'issues': issues,
            'main_issues': main_issues,
            'recommendations': recommendations,
            'subjects_distribution': dict(subjects_distribution)
        }
    
    def _detect_subject_blocks(self, day_schedule: List[Dict]) -> Dict[str, List[int]]:
        """D√©tecte les blocs de mati√®res cons√©cutives"""
        blocks = defaultdict(list)
        
        if not day_schedule:
            return blocks
        
        current_subject = None
        current_block_size = 0
        
        for entry in day_schedule:
            subject = entry['subject']
            
            if subject == current_subject:
                current_block_size += 1
            else:
                if current_subject and current_block_size > 0:
                    blocks[current_subject].append(current_block_size)
                
                current_subject = subject
                current_block_size = 1
        
        # Ajouter le dernier bloc
        if current_subject and current_block_size > 0:
            blocks[current_subject].append(current_block_size)
        
        return dict(blocks)
    
    def _calculate_blocks_score(self, subjects_distribution: Dict[str, List[int]]) -> float:
        """Calcule le score bas√© sur la qualit√© des blocs"""
        score = 100
        
        for subject, blocks in subjects_distribution.items():
            if subject in self.PEDAGOGICAL_RULES['core_subjects']:
                max_block = max(blocks) if blocks else 0
                
                if max_block < self.PEDAGOGICAL_RULES['min_block_size']:
                    score -= 15  # P√©nalit√© forte pour les mati√®res fragment√©es
                elif max_block >= self.PEDAGOGICAL_RULES['preferred_block_size']:
                    score += 5   # Bonus pour les blocs optimaux
        
        return max(0, min(100, score))
    
    def _calculate_distribution_score(self, daily_hours: List[int]) -> float:
        """Calcule le score bas√© sur la r√©partition des heures"""
        if not daily_hours:
            return 0
        
        # V√©rifier l'√©quilibre des journ√©es
        avg_hours = sum(daily_hours) / len(daily_hours)
        variance = sum((h - avg_hours) ** 2 for h in daily_hours) / len(daily_hours)
        
        # Score bas√© sur la r√©gularit√© (moins de variance = meilleur score)
        distribution_score = max(0, 100 - (variance * 10))
        
        # P√©nalit√©s pour les journ√©es trop courtes ou trop longues
        for hours in daily_hours:
            if hours < self.PEDAGOGICAL_RULES['min_daily_hours']:
                distribution_score -= 10
            elif hours > self.PEDAGOGICAL_RULES['max_daily_hours']:
                distribution_score -= 15
        
        return max(0, distribution_score)
    
    def _calculate_subjects_score(self, subjects_distribution: Dict[str, List[int]]) -> float:
        """Calcule le score bas√© sur la r√©partition des mati√®res"""
        score = 100
        
        # V√©rifier que chaque mati√®re principale a suffisamment d'heures
        for subject in self.PEDAGOGICAL_RULES['core_subjects']:
            total_hours = sum(subjects_distribution.get(subject, []))
            if total_hours == 0:
                continue  # Mati√®re non pr√©sente, pas de p√©nalit√©
            
            if total_hours < 3:  # Moins de 3h par semaine
                score -= 10
            elif total_hours > 8:  # Plus de 8h par semaine
                score -= 5
        
        return max(0, score)
    
    def _analyze_cross_class_issues(self, entries: List[Dict]) -> Dict[str, Any]:
        """Analyse les probl√®mes transversaux (professeurs, salles, etc.)"""
        issues = []
        recommendations = []
        
        # Analyser les conflits de professeurs
        teacher_conflicts = self._detect_teacher_conflicts(entries)
        for conflict in teacher_conflicts:
            issues.append({
                'type': 'teacher_conflict',
                'severity': 'critical',
                'teacher': conflict['teacher'],
                'classes': conflict['classes'],
                'slot': conflict['slot'],
                'message': f'Professeur {conflict["teacher"]} enseigne simultan√©ment √† {len(conflict["classes"])} classes'
            })
        
        # Analyser l'utilisation des professeurs
        teacher_usage = self._analyze_teacher_usage(entries)
        for teacher, analysis in teacher_usage.items():
            if analysis['gaps'] > 2:  # Plus de 2 trous dans la semaine
                recommendations.append({
                    'type': 'optimize_teacher_schedule',
                    'priority': 3,
                    'teacher': teacher,
                    'gaps': analysis['gaps'],
                    'description': f'R√©duire les {analysis["gaps"]} trous de {teacher}',
                    'automated_fix': True
                })
        
        return {
            'issues': issues,
            'recommendations': recommendations
        }
    
    def _detect_teacher_conflicts(self, entries: List[Dict]) -> List[Dict]:
        """D√©tecte les conflits de professeurs"""
        conflicts = []
        
        # Organiser par cr√©neau et professeur
        slot_teachers = defaultdict(lambda: defaultdict(list))
        
        for entry in entries:
            slot_key = (entry['day_of_week'], entry['slot_index'])
            teachers = entry['teacher_names'] if isinstance(entry['teacher_names'], list) else [entry['teacher_names']]
            
            for teacher in teachers:
                if teacher and teacher != '◊ú◊ê ◊û◊©◊ï◊ë◊•':
                    slot_teachers[slot_key][teacher].append(entry['class_name'])
        
        # D√©tecter les conflits
        for slot_key, teachers_dict in slot_teachers.items():
            for teacher, classes in teachers_dict.items():
                if len(classes) > 1:
                    conflicts.append({
                        'slot': slot_key,
                        'teacher': teacher,
                        'classes': classes
                    })
        
        return conflicts
    
    def _analyze_teacher_usage(self, entries: List[Dict]) -> Dict[str, Dict]:
        """Analyse l'utilisation des professeurs"""
        teacher_schedules = defaultdict(lambda: defaultdict(list))
        
        for entry in entries:
            teachers = entry['teacher_names'] if isinstance(entry['teacher_names'], list) else [entry['teacher_names']]
            day = entry['day_of_week']
            slot = entry['slot_index']
            
            for teacher in teachers:
                if teacher and teacher != '◊ú◊ê ◊û◊©◊ï◊ë◊•':
                    teacher_schedules[teacher][day].append(slot)
        
        # Calculer les statistiques pour chaque professeur
        teacher_analysis = {}
        for teacher, schedule in teacher_schedules.items():
            total_gaps = 0
            total_hours = 0
            
            for day, slots in schedule.items():
                if slots:
                    slots.sort()
                    total_hours += len(slots)
                    # Compter les trous
                    for i in range(slots[0], slots[-1]):
                        if i not in slots:
                            total_gaps += 1
            
            teacher_analysis[teacher] = {
                'total_hours': total_hours,
                'gaps': total_gaps,
                'days_active': len([d for d in schedule.values() if d])
            }
        
        return teacher_analysis
    
    def _classify_issues_by_priority(self, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Classe les probl√®mes par priorit√© et faisabilit√© de correction automatique"""
        
        critical_issues = [issue for issue in analysis['issues_found'] if issue['severity'] == 'critical']
        high_issues = [issue for issue in analysis['issues_found'] if issue['severity'] == 'high']
        medium_issues = [issue for issue in analysis['issues_found'] if issue['severity'] == 'medium']
        low_issues = [issue for issue in analysis['issues_found'] if issue['severity'] == 'warning']
        
        # Identifier les corrections automatiques possibles
        auto_fixable = [rec for rec in analysis['recommendations'] if rec.get('automated_fix')]
        manual_review = [rec for rec in analysis['recommendations'] if not rec.get('automated_fix')]
        
        analysis['issues_by_priority'] = {
            'critical': critical_issues,
            'high': high_issues, 
            'medium': medium_issues,
            'low': low_issues
        }
        
        analysis['corrections'] = {
            'automatic': auto_fixable,
            'manual_review': manual_review
        }
        
        return analysis
    
    def auto_improve_schedule(self, max_iterations: int = 10) -> Dict[str, Any]:
        """
        Am√©lioration automatique it√©rative jusqu'√† obtenir un emploi du temps parfait
        """
        logger.info(f"üîÑ D√âBUT D'AM√âLIORATION AUTOMATIQUE (max {max_iterations} it√©rations)")
        
        improvements_made = []
        iteration = 0
        
        while iteration < max_iterations:
            iteration += 1
            logger.info(f"üìà It√©ration {iteration}/{max_iterations}")
            
            # Analyser l'√©tat actuel
            analysis = self.analyze_full_schedule(self.current_schedule_id)
            
            if analysis['pedagogical_score'] >= 95:  # Score presque parfait
                logger.info(f"üéâ EMPLOI DU TEMPS OPTIMAL ATTEINT (Score: {analysis['pedagogical_score']}/100)")
                break
            
            # Identifier les corrections automatiques
            auto_fixes = analysis['corrections']['automatic']
            
            if not auto_fixes:
                logger.info("‚ö†Ô∏è Aucune correction automatique possible, arr√™t de l'optimisation")
                break
            
            # Appliquer la correction la plus prioritaire
            fix_applied = None
            for fix in sorted(auto_fixes, key=lambda x: x['priority']):
                logger.info(f"üîß Tentative de correction: {fix['description']}")
                
                success = self._apply_automatic_fix(fix)
                if success:
                    fix_applied = fix
                    improvements_made.append({
                        'iteration': iteration,
                        'fix': fix,
                        'timestamp': datetime.now().isoformat()
                    })
                    logger.info(f"‚úÖ Correction appliqu√©e: {fix['description']}")
                    break
                else:
                    logger.warning(f"‚ùå √âchec de la correction: {fix['description']}")
            
            if not fix_applied:
                logger.warning("‚ö†Ô∏è Aucune correction n'a pu √™tre appliqu√©e, arr√™t")
                break
        
        # Analyse finale
        final_analysis = self.analyze_full_schedule(self.current_schedule_id)
        
        return {
            'success': True,
            'iterations_performed': iteration,
            'improvements_made': improvements_made,
            'initial_score': self.analysis_log[0]['pedagogical_score'] if self.analysis_log else 0,
            'final_score': final_analysis['pedagogical_score'],
            'final_analysis': final_analysis,
            'remaining_issues': final_analysis['issues_by_priority']['critical'] + final_analysis['issues_by_priority']['high']
        }
    
    def _apply_automatic_fix(self, fix: Dict[str, Any]) -> bool:
        """Applique une correction automatique"""
        
        try:
            if fix['type'] == 'eliminate_gaps':
                return self._fix_gaps_automatically()
            
            elif fix['type'] == 'create_blocks':
                return self._create_subject_blocks(fix['subject'])
                
            elif fix['type'] == 'optimize_teacher_schedule':
                return self._optimize_teacher_gaps(fix['teacher'])
            
            else:
                logger.warning(f"Type de correction non impl√©ment√©: {fix['type']}")
                return False
                
        except Exception as e:
            logger.error(f"Erreur lors de l'application de la correction: {e}")
            return False
    
    def _fix_gaps_automatically(self) -> bool:
        """Corrige automatiquement les trous en d√©pla√ßant les cours"""
        logger.info("üîß Correction automatique des trous...")
        
        # Charger l'emploi du temps actuel
        schedule_by_class = self._organize_schedule_by_class(self.scheduler.schedule_entries)
        
        fixes_applied = 0
        
        for class_name, class_schedule in schedule_by_class.items():
            for day, day_schedule in class_schedule.items():
                if len(day_schedule) < 2:
                    continue  # Pas assez de cours pour avoir des trous
                
                # D√©tecter les trous
                slots = [entry['slot_index'] for entry in day_schedule]
                slots.sort()
                
                gaps = []
                for i in range(slots[0], slots[-1]):
                    if i not in slots:
                        gaps.append(i)
                
                if not gaps:
                    continue  # Pas de trous
                
                # Essayer de combler les trous en d√©pla√ßant les cours
                for gap_slot in gaps:
                    # Chercher un cours √† d√©placer vers ce trou
                    for other_day in range(5):  # Lundi √† jeudi
                        if other_day == day:
                            continue
                        
                        other_day_schedule = class_schedule.get(other_day, [])
                        if not other_day_schedule:
                            continue
                        
                        # Chercher un cours isol√© √† d√©placer
                        for entry in other_day_schedule:
                            if self._is_course_movable(entry, class_name, other_day, day, gap_slot):
                                # D√©placer le cours
                                result = self.scheduler.move_course(
                                    class_name, entry['subject'],
                                    other_day, entry['slot_index'],
                                    day, gap_slot
                                )
                                
                                if result['success']:
                                    # Sauvegarder
                                    save_result = self.scheduler.save_modifications()
                                    if save_result['success']:
                                        self.current_schedule_id = save_result['new_schedule_id']
                                        fixes_applied += 1
                                        logger.info(f"‚úÖ Cours {entry['subject']} d√©plac√© pour combler un trou")
                                        
                                        # Recharger pour la prochaine modification
                                        self.scheduler.load_existing_schedule(self.current_schedule_id)
                                        return True  # Une correction √† la fois
                
        return fixes_applied > 0
    
    def _is_course_movable(self, entry: Dict, class_name: str, from_day: int, to_day: int, to_slot: int) -> bool:
        """V√©rifie si un cours peut √™tre d√©plac√© sans cr√©er de conflits"""
        
        # V√©rifications basiques
        if not entry or not entry.get('subject'):
            return False
        
        # √âviter de d√©placer les cours parall√®les (plus complexe)
        if entry.get('kind') == 'parallel':
            return False
        
        # V√©rifier les contraintes isra√©liennes
        young_grades = ['◊ñ-1', '◊ñ-2', '◊ñ-3', '◊ñ-4', '◊ó-1', '◊ó-2', '◊ó-3', '◊ó-4', '◊ò-1', '◊ò-2', '◊ò-3', '◊ò-4', '◊ò-5']
        if class_name in young_grades and to_day == 1 and to_slot > 4:  # Lundi apr√®s p√©riode 4
            return False
        
        # Autres v√©rifications pourraient √™tre ajout√©es ici
        return True
    
    def _create_subject_blocks(self, subject: str) -> bool:
        """Cr√©e des blocs de cours cons√©cutifs pour une mati√®re"""
        logger.info(f"üîß Cr√©ation de blocs pour {subject}...")
        
        # Cette fonction n√©cessiterait une logique complexe de regroupement
        # Pour l'instant, on retourne False pour indiquer qu'elle n'est pas impl√©ment√©e
        logger.warning(f"Cr√©ation de blocs pour {subject} non encore impl√©ment√©e automatiquement")
        return False
    
    def _optimize_teacher_gaps(self, teacher: str) -> bool:
        """Optimise l'emploi du temps d'un professeur pour r√©duire ses trous"""
        logger.info(f"üîß Optimisation de l'emploi du temps de {teacher}...")
        
        # Cette fonction n√©cessiterait une analyse approfondie des cours du professeur
        # Pour l'instant, on retourne False pour indiquer qu'elle n'est pas impl√©ment√©e
        logger.warning(f"Optimisation pour {teacher} non encore impl√©ment√©e automatiquement")
        return False
    
    def ask_user_question(self, problem: Dict[str, Any]) -> str:
        """
        Pose une question intelligente √† l'utilisateur quand un probl√®me ne peut pas √™tre r√©solu automatiquement
        """
        question_type = problem.get('type', 'unknown')
        
        if question_type == 'insufficient_block':
            subject = problem.get('subject', 'mati√®re inconnue')
            max_block = problem.get('max_block', 0)
            
            question = f"""
ü§î PROBL√àME D√âTECT√â: La mati√®re '{subject}' est trop fragment√©e

üìä SITUATION ACTUELLE:
   ‚Ä¢ Plus grand bloc cons√©cutif: {max_block}h
   ‚Ä¢ Minimum recommand√©: {self.PEDAGOGICAL_RULES['min_block_size']}h
   ‚Ä¢ Optimal recommand√©: {self.PEDAGOGICAL_RULES['preferred_block_size']}h

‚ùì QUESTION:
Pour am√©liorer l'apprentissage de {subject}, je recommande de regrouper les heures en blocs de 2-3h cons√©cutives.

Que pr√©f√©rez-vous:
1. Regrouper automatiquement les heures de {subject} (peut d√©placer d'autres cours)
2. Garder la r√©partition actuelle mais accepter une efficacit√© p√©dagogique moindre
3. Me donner des contraintes sp√©cifiques pour {subject} (jours pr√©f√©r√©s, heures √† √©viter, etc.)

Votre choix (1/2/3): """

        elif question_type == 'gap':
            day = problem.get('day', 0)
            slot = problem.get('slot', 0)
            day_names = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi']
            
            question = f"""
üï≥Ô∏è PROBL√àME D√âTECT√â: Trou dans l'emploi du temps

üìÖ SITUATION:
   ‚Ä¢ Jour: {day_names[day]}
   ‚Ä¢ P√©riode: {slot + 1}
   ‚Ä¢ Impact: Les √©l√®ves ont une heure libre au milieu de leur journ√©e

‚ùì QUESTION:
Ce trou peut √™tre probl√©matique pour la discipline et l'organisation. 

Comment souhaitez-vous le r√©soudre:
1. D√©placer automatiquement un cours pour combler ce trou
2. Raccourcir la journ√©e en d√©pla√ßant les cours vers les bords
3. Accepter ce trou s'il y a une raison p√©dagogique (pause, √©tude dirig√©e, etc.)

Votre choix (1/2/3): """

        elif question_type == 'teacher_conflict':
            teacher = problem.get('teacher', 'professeur inconnu')
            classes = problem.get('classes', [])
            
            question = f"""
üë®‚Äçüè´ PROBL√àME CRITIQUE: Conflit de professeur

‚ö†Ô∏è SITUATION:
   ‚Ä¢ Professeur: {teacher}
   ‚Ä¢ Enseigne simultan√©ment √†: {', '.join(classes)}
   ‚Ä¢ Ceci est physiquement impossible!

‚ùì QUESTION URGENTE:
Ce conflit doit √™tre r√©solu imm√©diatement.

Options:
1. D√©placer automatiquement l'un des cours vers un autre cr√©neau
2. Diviser les groupes si c'est un cours parall√®le qui peut √™tre s√©par√©
3. Me dire s'il y a une erreur dans les donn√©es (ce professeur ne devrait pas enseigner √† certaines classes)

Votre choix (1/2/3): """

        else:
            question = f"""
‚ùì PROBL√àME COMPLEXE D√âTECT√â

Je rencontre un probl√®me que je ne peux pas r√©soudre automatiquement:
{problem.get('message', 'Probl√®me non sp√©cifi√©')}

Pouvez-vous m'aider √† comprendre comment proc√©der?
"""

        self.questions_asked.append({
            'timestamp': datetime.now().isoformat(),
            'problem': problem,
            'question': question
        })
        
        return question


def main():
    """Test de l'analyseur p√©dagogique"""
    logging.basicConfig(level=logging.INFO)
    
    db_config = {
        "host": "localhost",
        "database": "school_scheduler", 
        "user": "admin",
        "password": "school123",
        "port": 5432
    }
    
    analyzer = PedagogicalAnalyzer(db_config)
    
    # Analyser le dernier emploi du temps
    analysis = analyzer.analyze_full_schedule()
    
    if analysis.get('success') is False:
        print(f"‚ùå Erreur: {analysis.get('error')}")
        return
    
    print(f"\nüìä ANALYSE P√âDAGOGIQUE TERMIN√âE")
    print(f"Score global: {analysis['pedagogical_score']}/100")
    print(f"Probl√®mes critiques: {len(analysis['issues_by_priority']['critical'])}")
    print(f"Corrections automatiques possibles: {len(analysis['corrections']['automatic'])}")
    
    # Tenter une am√©lioration automatique
    if analysis['pedagogical_score'] < 90:
        print(f"\nüîÑ D√âBUT D'AM√âLIORATION AUTOMATIQUE...")
        improvement = analyzer.auto_improve_schedule(max_iterations=5)
        
        print(f"Am√©liorations r√©alis√©es: {len(improvement['improvements_made'])}")
        print(f"Score initial: {improvement['initial_score']}/100")
        print(f"Score final: {improvement['final_score']}/100")


if __name__ == "__main__":
    main()