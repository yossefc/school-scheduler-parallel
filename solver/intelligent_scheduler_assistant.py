#!/usr/bin/env python3
"""
intelligent_scheduler_assistant.py - Assistant intelligent pour am√©lioration continue
Impl√©mente le syst√®me demand√© par l'utilisateur: analyse, corrections automatiques, et questions intelligentes
"""
import logging
import json
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from incremental_scheduler import IncrementalScheduler
from pedagogical_analyzer import PedagogicalAnalyzer

logger = logging.getLogger(__name__)

class IntelligentSchedulerAssistant:
    """
    Assistant intelligent qui impl√©mente exactement ce que l'utilisateur demande:
    - Cr√©e des emplois du temps avec r√®gles p√©dagogiques strictes
    - Analyse automatiquement et d√©tecte les probl√®mes
    - Fait des corrections automatiques quand possible
    - Pose des questions intelligentes et d√©taill√©es quand n√©cessaire
    - Continue jusqu'√† obtenir un emploi du temps parfait
    """
    
    def __init__(self, db_config: Dict[str, Any]):
        self.db_config = db_config
        self.scheduler = IncrementalScheduler(db_config)
        self.analyzer = PedagogicalAnalyzer(db_config)
        self.conversation_log = []
        self.improvement_session = None
        self.questions_asked = []
        self.user_responses = []
        
        # Objectifs de qualit√©
        self.QUALITY_TARGETS = {
            'excellent': 95,
            'good': 85,
            'acceptable': 75,
            'minimum': 60
        }
        
    def start_improvement_session(self, schedule_id: Optional[int] = None, target_quality: int = 90) -> Dict[str, Any]:
        """
        D√©marre une session d'am√©lioration continue d'un emploi du temps
        Correspond exactement √† la demande utilisateur
        """
        logger.info("üöÄ D√âMARRAGE D'UNE SESSION D'AM√âLIORATION CONTINUE")
        logger.info(f"   Objectif qualit√©: {target_quality}/100")
        
        self.improvement_session = {
            'session_id': datetime.now().strftime("%Y%m%d_%H%M%S"),
            'start_time': datetime.now().isoformat(),
            'target_quality': target_quality,
            'iterations': 0,
            'improvements_made': [],
            'questions_asked': [],
            'current_score': 0,
            'status': 'active'
        }
        
        # Charger l'emploi du temps de d√©part
        load_result = self.scheduler.load_existing_schedule(schedule_id)
        if not load_result['success']:
            return {
                "success": False,
                "error": f"Impossible de charger l'emploi du temps: {load_result['error']}"
            }
        
        # Premi√®re analyse
        initial_analysis = self.analyzer.analyze_full_schedule(self.scheduler.schedule_id)
        self.improvement_session['initial_score'] = initial_analysis['pedagogical_score']
        self.improvement_session['current_score'] = initial_analysis['pedagogical_score']
        
        logger.info(f"üìä Score initial: {initial_analysis['pedagogical_score']}/100")
        
        # Commencer le processus d'am√©lioration
        result = self._run_improvement_cycle()
        
        return {
            "success": True,
            "session_id": self.improvement_session['session_id'],
            "initial_analysis": initial_analysis,
            "improvement_result": result,
            "message": "Session d'am√©lioration d√©marr√©e avec succ√®s"
        }
    
    def _run_improvement_cycle(self, max_iterations: int = 20) -> Dict[str, Any]:
        """
        Cycle principal d'am√©lioration - impl√©mente la logique demand√©e par l'utilisateur
        """
        logger.info("üîÑ D√âBUT DU CYCLE D'AM√âLIORATION AUTOMATIQUE")
        
        while self.improvement_session['iterations'] < max_iterations:
            self.improvement_session['iterations'] += 1
            iteration = self.improvement_session['iterations']
            
            logger.info(f"üìà === IT√âRATION {iteration}/{max_iterations} ===")
            
            # 1. ANALYSER l'emploi du temps actuel
            current_analysis = self.analyzer.analyze_full_schedule(self.scheduler.schedule_id)
            current_score = current_analysis['pedagogical_score']
            self.improvement_session['current_score'] = current_score
            
            logger.info(f"üìä Score actuel: {current_score}/100")
            
            # 2. V√âRIFIER si l'objectif est atteint
            if current_score >= self.improvement_session['target_quality']:
                logger.info(f"üéâ OBJECTIF ATTEINT! Score: {current_score}/100 >= {self.improvement_session['target_quality']}/100")
                self.improvement_session['status'] = 'completed'
                break
            
            # 3. IDENTIFIER les probl√®mes critiques
            critical_issues = current_analysis['issues_by_priority']['critical']
            high_issues = current_analysis['issues_by_priority']['high']
            
            if not critical_issues and not high_issues:
                logger.info("‚úÖ Plus de probl√®mes critiques ou importants d√©tect√©s")
                self.improvement_session['status'] = 'completed'
                break
            
            # 4. TENTER des corrections automatiques
            auto_fix_attempted = False
            for issue in critical_issues + high_issues:
                fix_result = self._attempt_automatic_fix(issue)
                
                if fix_result['success']:
                    auto_fix_attempted = True
                    self.improvement_session['improvements_made'].append({
                        'iteration': iteration,
                        'fix': fix_result,
                        'issue_resolved': issue,
                        'timestamp': datetime.now().isoformat()
                    })
                    logger.info(f"‚úÖ Correction automatique appliqu√©e: {fix_result['description']}")
                    break  # Une correction √† la fois
                else:
                    logger.info(f"‚ùå Correction automatique √©chou√©e: {fix_result['error']}")
            
            # 5. Si aucune correction automatique possible, POSER UNE QUESTION
            if not auto_fix_attempted:
                most_critical_issue = critical_issues[0] if critical_issues else high_issues[0]
                question = self._generate_intelligent_question(most_critical_issue, current_analysis)
                
                logger.info("ü§î QUESTION INTELLIGENTE G√âN√âR√âE")
                logger.info(f"Probl√®me: {most_critical_issue.get('message', 'Probl√®me non sp√©cifi√©')}")
                
                self.improvement_session['questions_asked'].append({
                    'iteration': iteration,
                    'issue': most_critical_issue,
                    'question': question,
                    'timestamp': datetime.now().isoformat()
                })
                
                # En mode automatique, on s'arr√™te ici pour poser la question √† l'utilisateur
                self.improvement_session['status'] = 'waiting_for_user_input'
                return {
                    "status": "question_required",
                    "question": question,
                    "issue": most_critical_issue,
                    "current_score": current_score,
                    "iteration": iteration,
                    "session_id": self.improvement_session['session_id']
                }
        
        # Fin du cycle
        final_analysis = self.analyzer.analyze_full_schedule(self.scheduler.schedule_id)
        self.improvement_session['final_score'] = final_analysis['pedagogical_score']
        self.improvement_session['end_time'] = datetime.now().isoformat()
        
        if self.improvement_session['status'] != 'waiting_for_user_input':
            self.improvement_session['status'] = 'completed'
        
        return {
            "status": "completed" if self.improvement_session['status'] == 'completed' else "interrupted",
            "iterations_performed": self.improvement_session['iterations'],
            "initial_score": self.improvement_session['initial_score'],
            "final_score": self.improvement_session['final_score'],
            "improvements_made": len(self.improvement_session['improvements_made']),
            "questions_asked": len(self.improvement_session['questions_asked']),
            "session_data": self.improvement_session
        }
    
    def answer_question(self, user_response: str, continue_improvement: bool = True) -> Dict[str, Any]:
        """
        Traite la r√©ponse de l'utilisateur et continue l'am√©lioration
        """
        if not self.improvement_session or not self.improvement_session['questions_asked']:
            return {"success": False, "error": "Aucune question en attente"}
        
        last_question = self.improvement_session['questions_asked'][-1]
        
        # Enregistrer la r√©ponse
        self.user_responses.append({
            'question_iteration': last_question['iteration'],
            'question': last_question['question'],
            'user_response': user_response,
            'timestamp': datetime.now().isoformat()
        })
        
        logger.info(f"üìù R√©ponse utilisateur re√ßue: {user_response[:100]}...")
        
        # Traiter la r√©ponse
        processing_result = self._process_user_response(user_response, last_question['issue'])
        
        if processing_result['success'] and processing_result.get('action_taken'):
            # Une action a √©t√© prise, enregistrer l'am√©lioration
            self.improvement_session['improvements_made'].append({
                'iteration': last_question['iteration'],
                'user_guided': True,
                'action': processing_result['action_taken'],
                'user_response': user_response,
                'timestamp': datetime.now().isoformat()
            })
        
        # Continuer l'am√©lioration si demand√©
        if continue_improvement:
            self.improvement_session['status'] = 'active'
            continue_result = self._run_improvement_cycle()
            
            return {
                "success": True,
                "response_processed": processing_result,
                "improvement_continued": continue_result,
                "session_status": self.improvement_session['status']
            }
        else:
            return {
                "success": True,
                "response_processed": processing_result,
                "session_status": "paused"
            }
    
    def _attempt_automatic_fix(self, issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tente une correction automatique pour un probl√®me donn√©
        """
        issue_type = issue.get('type', 'unknown')
        
        try:
            if issue_type == 'gap':
                return self._fix_gap_automatically(issue)
            
            elif issue_type == 'insufficient_block':
                return self._fix_fragmentation_automatically(issue)
            
            elif issue_type == 'teacher_conflict':
                return self._fix_teacher_conflict_automatically(issue)
            
            elif issue_type == 'too_many_subjects':
                return self._fix_subject_overload_automatically(issue)
            
            else:
                return {
                    "success": False,
                    "error": f"Type de probl√®me non support√© pour correction automatique: {issue_type}"
                }
                
        except Exception as e:
            logger.error(f"Erreur lors de la correction automatique: {e}")
            return {
                "success": False,
                "error": f"Erreur technique: {str(e)}"
            }
    
    def _fix_gap_automatically(self, issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Corrige automatiquement un trou dans l'emploi du temps
        """
        class_name = issue.get('class')
        day = issue.get('day')
        gap_slot = issue.get('slot')
        
        if not all([class_name, day is not None, gap_slot is not None]):
            return {"success": False, "error": "Informations insuffisantes pour corriger le trou"}
        
        logger.info(f"üîß Tentative de correction automatique du trou: Classe {class_name}, Jour {day+1}, P√©riode {gap_slot+1}")
        
        # Chercher un cours isol√© √† d√©placer vers ce trou
        schedule_by_class = self.analyzer._organize_schedule_by_class(self.scheduler.schedule_entries)
        
        if class_name not in schedule_by_class:
            return {"success": False, "error": "Classe non trouv√©e dans l'emploi du temps"}
        
        # Chercher dans les autres jours
        for other_day in range(5):
            if other_day == day:
                continue
            
            other_day_schedule = schedule_by_class[class_name].get(other_day, [])
            
            # Chercher un cours qui peut √™tre d√©plac√©
            for entry in other_day_schedule:
                if self._is_course_suitable_for_gap_filling(entry, class_name, other_day, day, gap_slot):
                    # Tenter le d√©placement
                    move_result = self.scheduler.move_course(
                        class_name, entry['subject'],
                        other_day, entry['slot_index'],
                        day, gap_slot
                    )
                    
                    if move_result['success']:
                        # Sauvegarder
                        save_result = self.scheduler.save_modifications()
                        if save_result['success']:
                            self.scheduler.load_existing_schedule(save_result['new_schedule_id'])
                            return {
                                "success": True,
                                "description": f"Cours {entry['subject']} d√©plac√© vers le trou",
                                "details": {
                                    "moved_course": entry['subject'],
                                    "from": f"Jour {other_day+1} P√©riode {entry['slot_index']+1}",
                                    "to": f"Jour {day+1} P√©riode {gap_slot+1}"
                                }
                            }
        
        return {
            "success": False,
            "error": "Aucun cours appropri√© trouv√© pour combler le trou automatiquement"
        }
    
    def _fix_fragmentation_automatically(self, issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tente de regrouper les heures d'une mati√®re fragment√©e
        """
        subject = issue.get('subject')
        class_name = issue.get('class')
        
        if not subject or not class_name:
            return {"success": False, "error": "Informations insuffisantes pour regrouper la mati√®re"}
        
        logger.info(f"üîß Tentative de regroupement automatique: {subject} pour {class_name}")
        
        # Cette correction est complexe et n√©cessite souvent l'intervention de l'utilisateur
        # Pour l'instant, on retourne False pour d√©clencher une question intelligente
        return {
            "success": False,
            "error": "Le regroupement automatique de mati√®res n√©cessite des d√©cisions p√©dagogiques"
        }
    
    def _fix_teacher_conflict_automatically(self, issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tente de r√©soudre un conflit de professeur
        """
        teacher = issue.get('teacher')
        
        if not teacher:
            return {"success": False, "error": "Professeur en conflit non sp√©cifi√©"}
        
        logger.info(f"üîß Tentative de r√©solution automatique du conflit: Professeur {teacher}")
        
        # Les conflits de professeurs sont critiques et n√©cessitent souvent une intervention manuelle
        return {
            "success": False,
            "error": "Les conflits de professeurs n√©cessitent une intervention manuelle"
        }
    
    def _fix_subject_overload_automatically(self, issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tente de r√©duire le nombre de mati√®res diff√©rentes dans une journ√©e
        """
        return {
            "success": False,
            "error": "La redistribution des mati√®res n√©cessite des d√©cisions p√©dagogiques"
        }
    
    def _is_course_suitable_for_gap_filling(self, entry: Dict, class_name: str, 
                                          from_day: int, to_day: int, to_slot: int) -> bool:
        """
        V√©rifie si un cours peut √™tre d√©plac√© pour combler un trou
        """
        # √âviter les cours parall√®les
        if entry.get('kind') == 'parallel':
            return False
        
        # √âviter les contraintes sp√©ciales (comme les jeunes classes le lundi)
        young_grades = ['◊ñ-1', '◊ñ-2', '◊ñ-3', '◊ñ-4', '◊ó-1', '◊ó-2', '◊ó-3', '◊ó-4']
        if class_name in young_grades and to_day == 1 and to_slot > 4:  # Lundi apr√®s p√©riode 4
            return False
        
        # V√©rifier que le cr√©neau de destination est libre
        conflicts = self.scheduler._check_conflicts_at_slot(
            to_day, to_slot, class_name, 
            entry['teachers'] if isinstance(entry['teachers'], list) else [entry['teachers']]
        )
        
        return len(conflicts) == 0
    
    def _generate_intelligent_question(self, issue: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """
        G√©n√®re une question intelligente et d√©taill√©e pour l'utilisateur
        Impl√©mente exactement ce que l'utilisateur demande
        """
        issue_type = issue.get('type', 'unknown')
        
        if issue_type == 'gap':
            return self._generate_gap_question(issue, analysis)
        
        elif issue_type == 'insufficient_block':
            return self._generate_fragmentation_question(issue, analysis)
        
        elif issue_type == 'teacher_conflict':
            return self._generate_teacher_conflict_question(issue, analysis)
        
        elif issue_type == 'too_many_subjects':
            return self._generate_subject_overload_question(issue, analysis)
        
        else:
            return self._generate_generic_question(issue, analysis)
    
    def _generate_gap_question(self, issue: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """
        Question intelligente pour les trous dans l'emploi du temps
        """
        class_name = issue.get('class', 'classe inconnue')
        day = issue.get('day', 0)
        slot = issue.get('slot', 0)
        day_names = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi']
        
        # Analyser le contexte
        schedule_by_class = self.analyzer._organize_schedule_by_class(self.scheduler.schedule_entries)
        class_schedule = schedule_by_class.get(class_name, {})
        day_schedule = class_schedule.get(day, [])
        
        courses_before = [c for c in day_schedule if c['slot_index'] < slot]
        courses_after = [c for c in day_schedule if c['slot_index'] > slot]
        
        question = f"""üï≥Ô∏è PROBL√àME CRITIQUE D√âTECT√â: Trou dans l'emploi du temps

üìç LOCALISATION DU PROBL√àME:
   ‚Ä¢ Classe: {class_name}
   ‚Ä¢ Jour: {day_names[day]} 
   ‚Ä¢ P√©riode libre: {slot + 1}

üìä CONTEXTE P√âDAGOGIQUE:
   ‚Ä¢ Cours avant le trou: {len(courses_before)} cours ({', '.join([c['subject'] for c in courses_before[-2:]]) if courses_before else 'aucun'})
   ‚Ä¢ Cours apr√®s le trou: {len(courses_after)} cours ({', '.join([c['subject'] for c in courses_after[:2]]) if courses_after else 'aucun'})
   ‚Ä¢ Impact: Les √©l√®ves ont une heure libre au milieu de leur journ√©e

‚ö†Ô∏è POURQUOI C'EST PROBL√âMATIQUE:
   ‚Ä¢ Discipline: Les √©l√®ves non supervis√©s peuvent perturber d'autres classes
   ‚Ä¢ Concentration: La coupure affecte la continuit√© p√©dagogique
   ‚Ä¢ Organisation: Complique la gestion des salles et du personnel

ü§î QUESTION D√âTAILL√âE:
Je n'arrive pas √† r√©soudre ce trou automatiquement car les cours disponibles pour le d√©placement ont des contraintes ou cr√©ent d'autres conflits.

SOLUTIONS POSSIBLES:
1. üîÑ D√©placer un cours d'un autre jour vers ce cr√©neau
   ‚îî Quels cours acceptez-vous de d√©placer? (je peux chercher les options)

2. üìê Raccourcir la journ√©e en regroupant tous les cours
   ‚îî Pr√©f√©rez-vous d√©caler vers le d√©but ou la fin de journ√©e?

3. üéØ Utiliser ce cr√©neau pour une activit√© sp√©ciale
   ‚îî √âtude dirig√©e? Activit√© libre? Pause d√©jeuner prolong√©e?

4. üîç Revoir les contraintes de cette classe
   ‚îî Y a-t-il des contraintes sp√©ciales pour {class_name} que je ne connais pas?

VOTRE D√âCISION: Que souhaitez-vous que je fasse? (Num√©rotez votre choix 1-4 et expliquez vos pr√©f√©rences)"""

        return question
    
    def _generate_fragmentation_question(self, issue: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """
        Question intelligente pour les mati√®res fragment√©es
        """
        subject = issue.get('subject', 'mati√®re inconnue')
        class_name = issue.get('class', 'classe inconnue')
        max_block = issue.get('max_block', 0)
        
        # Analyser la distribution actuelle de la mati√®re
        schedule_by_class = self.analyzer._organize_schedule_by_class(self.scheduler.schedule_entries)
        class_schedule = schedule_by_class.get(class_name, {})
        
        subject_distribution = []
        for day, day_schedule in class_schedule.items():
            day_subjects = [entry['subject'] for entry in day_schedule]
            subject_count = day_subjects.count(subject)
            if subject_count > 0:
                subject_distribution.append(f"Jour {day+1}: {subject_count}h")
        
        question = f"""üìö PROBL√àME P√âDAGOGIQUE: Mati√®re fragment√©e

üéØ MATI√àRE CONCERN√âE: {subject}
üìç CLASSE: {class_name}

üìä SITUATION ACTUELLE:
   ‚Ä¢ Plus grand bloc cons√©cutif: {max_block}h
   ‚Ä¢ Minimum recommand√©: 2h cons√©cutives
   ‚Ä¢ Optimal recommand√©: 3h cons√©cutives
   ‚Ä¢ R√©partition actuelle: {', '.join(subject_distribution)}

‚ùì POURQUOI C'EST PROBL√âMATIQUE:
   ‚Ä¢ Efficacit√© p√©dagogique: Les √©l√®ves n'ont pas le temps d'entrer vraiment dans le sujet
   ‚Ä¢ Exercices pratiques: Impossible de faire des travaux longs et approfondis
   ‚Ä¢ Transitions: Temps perdu entre les changements de mati√®re/salle/professeur
   ‚Ä¢ M√©morisation: Les connaissances fragment√©es sont moins bien retenues

üß† AVANTAGES DES BLOCS DE 2-3H CONS√âCUTIVES:
   ‚úÖ Cours magistral + exercices d'application dans la m√™me s√©ance
   ‚úÖ Projets et travaux de groupe possibles
   ‚úÖ Moins de stress li√© aux transitions
   ‚úÖ Approfondissement des concepts
   ‚úÖ Meilleure gestion du rythme p√©dagogique

ü§î QUESTION P√âDAGOGIQUE D√âTAILL√âE:
Je ne peux pas regrouper automatiquement les heures de {subject} car cela impacterait d'autres mati√®res et pourrait cr√©er des conflits.

OPTIONS DE REGROUPEMENT:
1. üéØ Regroupement prioritaire sur 2 jours
   ‚îî Cr√©er 2 blocs de 2h cons√©cutives r√©partis sur 2 jours diff√©rents

2. üîÑ Regroupement optimal sur 1-2 jours  
   ‚îî Cr√©er 1 bloc de 3h + 1 bloc de 1-2h (n√©cessite plus de d√©placements)

3. üìÖ Jour pr√©f√©rentiel pour {subject}
   ‚îî Concentrer toutes les heures sur 1-2 jours sp√©cifiques

4. ü§ù N√©gociation avec d'autres mati√®res
   ‚îî Quelles mati√®res peuvent √™tre fragment√©es √† la place de {subject}?

CONTRAINTES √Ä RESPECTER:
‚Ä¢ Disponibilit√© des professeurs de {subject}
‚Ä¢ Contraintes de salles sp√©cialis√©es
‚Ä¢ √âquilibre avec les autres mati√®res importantes

VOTRE D√âCISION P√âDAGOGIQUE: Comment souhaitez-vous regrouper {subject}? (Pr√©cisez vos priorit√©s et contraintes)"""

        return question
    
    def _generate_teacher_conflict_question(self, issue: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """
        Question intelligente pour les conflits de professeurs
        """
        teacher = issue.get('teacher', 'professeur inconnu')
        classes = issue.get('classes', [])
        slot_info = issue.get('slot', (0, 0))
        
        day, slot = slot_info if isinstance(slot_info, tuple) else (0, 0)
        day_names = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi']
        
        question = f"""üë®‚Äçüè´ CONFLIT CRITIQUE: Professeur en double emploi

‚ö†Ô∏è PROBL√àME URGENT:
   ‚Ä¢ Professeur: {teacher}
   ‚Ä¢ Cr√©neau: {day_names[day]} p√©riode {slot + 1}
   ‚Ä¢ Classes en conflit: {', '.join(classes)}
   ‚Ä¢ IMPOSSIBILIT√â PHYSIQUE: Un professeur ne peut pas √™tre √† deux endroits en m√™me temps!

üîç ANALYSE DU CONFLIT:
Ce type de conflit est CRITIQUE car il rend l'emploi du temps impossible √† appliquer.
Il faut r√©soudre ce probl√®me imm√©diatement avant toute autre optimisation.

ü§î QUESTION URGENTE ET D√âTAILL√âE:
Pourquoi ce conflit existe-t-il? Plusieurs causes possibles:

HYPOTH√àSES:
1. üìä Erreur dans les donn√©es
   ‚îî {teacher} ne devrait pas enseigner √† l'une de ces classes?
   ‚îî Cours mal attribu√© dans le syst√®me?

2. üîÑ Cours parall√®le mal configur√©
   ‚îî S'agit-il d'un cours qui DOIT avoir lieu simultan√©ment (cours parall√®le)?
   ‚îî Ou de deux cours ind√©pendants qui doivent √™tre s√©par√©s?

3. üë• Besoin d'un professeur suppl√©mentaire
   ‚îî Manque-t-il un autre professeur pour cette mati√®re?
   ‚îî Faut-il diviser les groupes?

SOLUTIONS POSSIBLES:
1. üöö D√©placement automatique
   ‚îî Je d√©place l'un des cours vers un autre cr√©neau libre

2. ‚úÇÔ∏è Division du groupe (si cours parall√®le)
   ‚îî S√©parer en deux cr√©neaux diff√©rents avec le m√™me professeur

3. üë• Ajout d'un professeur
   ‚îî Assigner un deuxi√®me professeur √† l'une des classes

4. üîß Correction des donn√©es
   ‚îî Modifier l'attribution de professeur si erreur

INFORMATION CRUCIALE N√âCESSAIRE:
‚Ä¢ {teacher} doit-il vraiment enseigner aux deux classes {', '.join(classes)}?
‚Ä¢ S'agit-il d'un cours parall√®le ou de deux cours distincts?
‚Ä¢ Y a-t-il d'autres professeurs disponibles pour l'une de ces classes?

VOTRE D√âCISION URGENTE: Comment r√©soudre ce conflit? (Soyez pr√©cis sur la solution pr√©f√©r√©e)"""

        return question
    
    def _generate_subject_overload_question(self, issue: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """
        Question intelligente pour trop de mati√®res diff√©rentes par jour
        """
        class_name = issue.get('class', 'classe inconnue')
        day = issue.get('day', 0)
        subject_count = issue.get('count', 0)
        subjects = issue.get('subjects', [])
        day_names = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi']
        
        question = f"""üìö SURCHARGE COGNITIVE: Trop de mati√®res diff√©rentes

üéØ PROBL√àME P√âDAGOGIQUE:
   ‚Ä¢ Classe: {class_name}
   ‚Ä¢ Jour: {day_names[day]}
   ‚Ä¢ Nombre de mati√®res: {subject_count} (maximum recommand√©: 4)
   ‚Ä¢ Mati√®res: {', '.join(subjects)}

üß† IMPACT SUR L'APPRENTISSAGE:
   ‚Ä¢ Fatigue cognitive: Les √©l√®ves doivent s'adapter √† trop de contextes diff√©rents
   ‚Ä¢ Transitions difficiles: Changements constants de m√©thode et de professeur
   ‚Ä¢ Mat√©riel scolaire: Gestion compliqu√©e des livres et cahiers
   ‚Ä¢ Concentration: Difficile de se plonger profond√©ment dans chaque mati√®re

üìö PRINCIPE P√âDAGOGIQUE:
Il est pr√©f√©rable d'avoir 3-4 mati√®res par jour avec des blocs plus longs plut√¥t que 5-6 mati√®res avec des heures isol√©es.

ü§î QUESTION D'ORGANISATION P√âDAGOGIQUE:
Comment souhaitez-vous r√©organiser ce jour pour r√©duire le nombre de mati√®res?

OPTIONS DE REDISTRIBUTION:
1. üîÑ D√©placement de mati√®res secondaires
   ‚îî Quelles mati√®res de {', '.join(subjects)} sont moins prioritaires?
   ‚îî Vers quels autres jours les d√©placer?

2. üéØ Concentration sur mati√®res principales
   ‚îî Garder seulement 3-4 mati√®res principales ce jour-l√†
   ‚îî Cr√©er des blocs plus longs pour ces mati√®res

3. üìÖ R√©√©quilibrage hebdomadaire
   ‚îî R√©partir plus uniform√©ment les mati√®res sur la semaine
   ‚îî √âviter les jours surcharg√©s et les jours trop l√©gers

4. üß© Regroupement th√©matique
   ‚îî Grouper les mati√®res par domaine (sciences, langues, etc.)
   ‚îî R√©duire les transitions cognitives

CONTRAINTES √Ä CONSID√âRER:
‚Ä¢ Disponibilit√© des professeurs
‚Ä¢ Salles sp√©cialis√©es n√©cessaires
‚Ä¢ Pr√©f√©rences p√©dagogiques pour certaines mati√®res

VOTRE STRAT√âGIE P√âDAGOGIQUE: Comment r√©organiser {day_names[day]} pour {class_name}? (Indiquez vos priorit√©s de mati√®res)"""

        return question
    
    def _generate_generic_question(self, issue: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """
        Question g√©n√©rique pour les probl√®mes non cat√©goris√©s
        """
        issue_message = issue.get('message', 'Probl√®me non sp√©cifi√©')
        issue_type = issue.get('type', 'unknown')
        
        question = f"""‚ùì PROBL√àME COMPLEXE D√âTECT√â

üîç DESCRIPTION DU PROBL√àME:
{issue_message}

üìä TYPE: {issue_type}

ü§î ANALYSE:
Je rencontre un probl√®me que je ne peux pas r√©soudre automatiquement avec mes algorithmes actuels.

INFORMATIONS CONTEXTUELLES:
‚Ä¢ Score p√©dagogique actuel: {analysis.get('pedagogical_score', 'N/A')}/100
‚Ä¢ Nombre total de probl√®mes: {len(analysis.get('issues_found', []))}
‚Ä¢ Probl√®mes critiques: {len(analysis.get('issues_by_priority', {}).get('critical', []))}

QUESTION D√âTAILL√âE:
Pouvez-vous m'aider √† comprendre comment proc√©der pour r√©soudre ce probl√®me?

INFORMATIONS UTILES:
‚Ä¢ Quelle est la priorit√© de ce probl√®me pour vous?
‚Ä¢ Y a-t-il des contraintes sp√©ciales que je ne connais pas?
‚Ä¢ Avez-vous des pr√©f√©rences p√©dagogiques particuli√®res?
‚Ä¢ Faut-il ignorer ce probl√®me temporairement?

VOTRE GUIDANCE: Comment souhaitez-vous que je traite ce probl√®me?"""

        return question
    
    def _process_user_response(self, response: str, issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Traite la r√©ponse de l'utilisateur et prend une action appropri√©e
        """
        response_lower = response.lower().strip()
        
        # Extraire les indices num√©riques (1, 2, 3, 4)
        choice = None
        for i in range(1, 5):
            if f"{i}" in response_lower or f"option {i}" in response_lower or f"choix {i}" in response_lower:
                choice = i
                break
        
        logger.info(f"üìù Traitement de la r√©ponse utilisateur - Choix d√©tect√©: {choice}")
        
        issue_type = issue.get('type', 'unknown')
        
        if issue_type == 'gap':
            return self._process_gap_response(response, choice, issue)
        
        elif issue_type == 'insufficient_block':
            return self._process_fragmentation_response(response, choice, issue)
        
        elif issue_type == 'teacher_conflict':
            return self._process_teacher_conflict_response(response, choice, issue)
        
        else:
            return {
                "success": True,
                "action_taken": f"R√©ponse enregistr√©e: {response[:100]}...",
                "note": "R√©ponse enregistr√©e pour traitement manuel ult√©rieur"
            }
    
    def _process_gap_response(self, response: str, choice: Optional[int], issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Traite la r√©ponse pour un probl√®me de trou
        """
        if choice == 1:  # D√©placer un cours
            logger.info("üë§ Utilisateur choisit: D√©placer un cours vers le trou")
            return {
                "success": True,
                "action_taken": "Tentative de d√©placement de cours vers le trou",
                "note": "L'utilisateur accepte le d√©placement automatique de cours"
            }
        
        elif choice == 2:  # Raccourcir la journ√©e
            logger.info("üë§ Utilisateur choisit: Raccourcir la journ√©e")
            return {
                "success": True,
                "action_taken": "Regroupement des cours pour raccourcir la journ√©e",
                "note": "L'utilisateur pr√©f√®re regrouper les cours"
            }
        
        elif choice == 3:  # Activit√© sp√©ciale
            logger.info("üë§ Utilisateur choisit: Utiliser pour activit√© sp√©ciale")
            return {
                "success": True,
                "action_taken": "Acceptation du trou pour activit√© sp√©ciale",
                "note": "Le trou est maintenu intentionnellement"
            }
        
        else:
            return {
                "success": True,
                "action_taken": f"R√©ponse libre enregistr√©e: {response[:100]}",
                "note": "R√©ponse personnalis√©e enregistr√©e"
            }
    
    def _process_fragmentation_response(self, response: str, choice: Optional[int], issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Traite la r√©ponse pour un probl√®me de fragmentation
        """
        subject = issue.get('subject', 'mati√®re inconnue')
        
        if choice == 1:  # Regroupement sur 2 jours
            logger.info(f"üë§ Utilisateur choisit: Regrouper {subject} sur 2 jours")
            return {
                "success": True,
                "action_taken": f"Regroupement de {subject} en blocs de 2h sur 2 jours",
                "note": "Strat√©gie de regroupement mod√©r√©e"
            }
        
        elif choice == 2:  # Regroupement optimal
            logger.info(f"üë§ Utilisateur choisit: Regroupement optimal de {subject}")
            return {
                "success": True,
                "action_taken": f"Regroupement optimal de {subject} (blocs 3h + 1-2h)",
                "note": "Strat√©gie de regroupement agressive"
            }
        
        else:
            return {
                "success": True,
                "action_taken": f"Instructions sp√©ciales pour {subject}: {response[:100]}",
                "note": "R√©ponse personnalis√©e pour la mati√®re"
            }
    
    def _process_teacher_conflict_response(self, response: str, choice: Optional[int], issue: Dict[str, Any]) -> Dict[str, Any]:
        """
        Traite la r√©ponse pour un conflit de professeur
        """
        teacher = issue.get('teacher', 'professeur inconnu')
        
        if choice == 1:  # D√©placement automatique
            logger.info(f"üë§ Utilisateur choisit: D√©placement automatique pour {teacher}")
            return {
                "success": True,
                "action_taken": f"D√©placement automatique d'un cours de {teacher}",
                "note": "R√©solution automatique du conflit"
            }
        
        elif choice == 2:  # Division du groupe
            logger.info(f"üë§ Utilisateur choisit: Division du groupe pour {teacher}")
            return {
                "success": True,
                "action_taken": f"Division du cours parall√®le de {teacher}",
                "note": "S√©paration en cr√©neaux distincts"
            }
        
        else:
            return {
                "success": True,
                "action_taken": f"Instructions sp√©ciales pour conflit {teacher}: {response[:100]}",
                "note": "R√©solution manuelle du conflit"
            }
    
    def get_session_status(self) -> Dict[str, Any]:
        """
        Retourne le statut de la session d'am√©lioration
        """
        if not self.improvement_session:
            return {"error": "Aucune session active"}
        
        return {
            "session_id": self.improvement_session['session_id'],
            "status": self.improvement_session['status'],
            "iterations": self.improvement_session['iterations'],
            "current_score": self.improvement_session['current_score'],
            "target_quality": self.improvement_session['target_quality'],
            "improvements_made": len(self.improvement_session['improvements_made']),
            "questions_asked": len(self.improvement_session['questions_asked']),
            "user_responses": len(self.user_responses)
        }
    
    def get_detailed_session_report(self) -> Dict[str, Any]:
        """
        G√©n√®re un rapport d√©taill√© de la session
        """
        if not self.improvement_session:
            return {"error": "Aucune session active"}
        
        return {
            "session_summary": self.improvement_session,
            "user_responses": self.user_responses,
            "final_analysis": self.analyzer.analyze_full_schedule(self.scheduler.schedule_id) if self.scheduler.schedule_id else None
        }


def main():
    """Test de l'assistant intelligent"""
    logging.basicConfig(level=logging.INFO)
    
    db_config = {
        "host": "localhost",
        "database": "school_scheduler", 
        "user": "admin",
        "password": "school123",
        "port": 5432
    }
    
    assistant = IntelligentSchedulerAssistant(db_config)
    
    # D√©marrer une session d'am√©lioration
    result = assistant.start_improvement_session(target_quality=85)
    
    if result['success']:
        print(f"\nüöÄ Session d√©marr√©e: {result['session_id']}")
        print(f"Score initial: {result['initial_analysis']['pedagogical_score']}/100")
        
        improvement = result['improvement_result']
        if improvement['status'] == 'question_required':
            print(f"\n‚ùì QUESTION POS√âE:")
            print(improvement['question'])
            
            # Simuler une r√©ponse utilisateur
            user_response = "1"  # Choix 1
            continue_result = assistant.answer_question(user_response)
            
            print(f"\nüìù R√©ponse trait√©e: {continue_result['response_processed']['action_taken']}")
            print(f"Statut final: {continue_result['session_status']}")
    else:
        print(f"‚ùå Erreur: {result['error']}")


if __name__ == "__main__":
    main()