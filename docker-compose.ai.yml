version: '3.8'

services:
  # Agent IA WebSocket Server
  ai_agent:
    build:
      context: ./scheduler_ai
      dockerfile: Dockerfile
    container_name: school_ai_agent
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=development
      - DB_HOST=postgres
      - DB_NAME=school_scheduler
      - DB_USER=admin
      - DB_PASSWORD=school123
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    networks:
      - school_network
    volumes:
      - ./scheduler_ai:/app
      - ./logs:/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: school_redis
    ports:
      - "6379:6379"
    networks:
      - school_network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # Frontend React avec l'agent IA intégré
  ai_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:8000
        - REACT_APP_AI_SOCKET_URL=http://localhost:5001
    container_name: school_ai_frontend
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
    networks:
      - school_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Prometheus pour le monitoring (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: school_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - school_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Grafana pour les dashboards (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: school_grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - school_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  school_network:
    external: true