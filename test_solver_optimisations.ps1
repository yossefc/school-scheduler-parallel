# Script PowerShell pour tester les optimisations du solver OR-Tools
# Usage: .\test_solver_optimisations.ps1

Write-Host "üöÄ Test des optimisations OR-Tools pour School Scheduler" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Green

# V√©rifier que Python est disponible
if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Python n'est pas trouv√© dans le PATH" -ForegroundColor Red
    exit 1
}

# V√©rifier que le service PostgreSQL est d√©marr√©
Write-Host "üìã V√©rification des services..." -ForegroundColor Yellow

try {
    # D√©marrer les services Docker si n√©cessaire
    Write-Host "üê≥ D√©marrage des services Docker..." -ForegroundColor Yellow
    docker-compose up -d postgres redis

    # Attendre que PostgreSQL soit pr√™t
    Write-Host "‚è≥ Attente de PostgreSQL..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10

    # V√©rifier la connexion √† la base
    Write-Host "üîç Test de connexion √† la base de donn√©es..." -ForegroundColor Yellow
    $testConnection = docker-compose exec -T postgres psql -h localhost -U admin -d school_scheduler -c "SELECT 1;" 2>&1
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Impossible de se connecter √† la base de donn√©es" -ForegroundColor Red
        Write-Host $testConnection -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Base de donn√©es accessible" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Erreur lors du d√©marrage des services: $_" -ForegroundColor Red
    exit 1
}

# Installer les d√©pendances Python si n√©cessaire
Write-Host "üì¶ V√©rification des d√©pendances Python..." -ForegroundColor Yellow

$requirements = @(
    "ortools",
    "psycopg2-binary"
)

foreach ($package in $requirements) {
    try {
        python -c "import $($package.Replace('-', '_'))" 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-Host "üì¶ Installation de $package..." -ForegroundColor Yellow
            pip install $package
        }
    } catch {
        Write-Host "üì¶ Installation de $package..." -ForegroundColor Yellow
        pip install $package
    }
}

Write-Host "‚úÖ D√©pendances v√©rifi√©es" -ForegroundColor Green

# Ex√©cuter les tests
Write-Host ""
Write-Host "üß™ LANCEMENT DES TESTS D'OPTIMISATION" -ForegroundColor Cyan
Write-Host "======================================" -ForegroundColor Cyan

try {
    python test_optimized_solver.py
    $testResult = $LASTEXITCODE
    
    Write-Host ""
    if ($testResult -eq 0) {
        Write-Host "üéâ TESTS R√âUSSIS! Le solver optimis√© fonctionne correctement." -ForegroundColor Green
        Write-Host "‚úÖ Optimisations OR-Tools valid√©es:" -ForegroundColor Green
        Write-Host "   - √âlimination des trous dans les plannings" -ForegroundColor Green
        Write-Host "   - Compacit√© maximale des emplois du temps" -ForegroundColor Green
        Write-Host "   - √âquilibrage hebdomadaire am√©lior√©" -ForegroundColor Green
        Write-Host "   - Non-superposition garantie" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è TESTS PARTIELLEMENT R√âUSSIS ou √âCHOU√âS" -ForegroundColor Yellow
        Write-Host "Consultez les logs ci-dessus pour plus de d√©tails." -ForegroundColor Yellow
    }
    
    # Afficher les instructions pour utiliser le solver optimis√©
    Write-Host ""
    Write-Host "üí° UTILISATION DU SOLVER OPTIMIS√â:" -ForegroundColor Cyan
    Write-Host "Pour utiliser le solver optimis√© dans votre application:" -ForegroundColor White
    Write-Host "1. Utilisez la classe ScheduleSolverWithConstraints" -ForegroundColor White
    Write-Host "2. Appelez solve() avec un time_limit appropri√© (600s recommand√©)" -ForegroundColor White
    Write-Host "3. Le solver optimisera automatiquement pour:" -ForegroundColor White
    Write-Host "   - Compacit√© maximale (√©limination des trous)" -ForegroundColor White
    Write-Host "   - √âquilibrage hebdomadaire" -ForegroundColor White
    Write-Host "   - Non-superposition stricte" -ForegroundColor White
    
} catch {
    Write-Host "‚ùå Erreur lors de l'ex√©cution des tests: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üèÅ Tests termin√©s." -ForegroundColor Green
exit $testResult