#!/usr/bin/env python3
"""
Script pour effacer toutes les donn√©es de la base et repartir √† z√©ro
"""

import psycopg2
from psycopg2.extras import RealDictCursor

def main():
    print("üßπ REMISE √Ä Z√âRO COMPL√àTE DE LA BASE DE DONN√âES")
    print("=" * 55)
    print("")

    db_config = {
        "host": "localhost",
        "database": "school_scheduler", 
        "user": "admin",
        "password": "school123"
    }

    try:
        conn = psycopg2.connect(**db_config)
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        print("‚úì Connexion √©tablie")
        print("")
        
        # 1. Afficher l'√©tat AVANT suppression
        print("üìä √âTAT AVANT SUPPRESSION:")
        print("-" * 30)
        
        tables = ['teacher_load', 'solver_input', 'teachers', 'classes', 'schedules', 'constraints', 'time_slots']
        
        for table in tables:
            try:
                cur.execute(f"SELECT COUNT(*) as count FROM {table};")
                count = cur.fetchone()['count']
                print(f"  {table}: {count} lignes")
            except:
                print(f"  {table}: table non trouv√©e")
        
        print("")
        
        # 2. Confirmer la suppression
        print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es!")
        print("   Tables qui seront vid√©es:")
        print("   - teacher_load (donn√©es des professeurs)")
        print("   - solver_input (donn√©es du solveur)")
        print("   - schedules (emplois du temps g√©n√©r√©s)")
        print("   - constraints (contraintes personnalis√©es)")
        print("")
        
        # 3. Effectuer les suppressions
        print("üóëÔ∏è  SUPPRESSION EN COURS...")
        print("-" * 25)
        
        # Ordre important pour √©viter les erreurs de contraintes
        suppression_order = [
            'schedules',
            'solver_input', 
            'constraints',
            'teacher_load'
        ]
        
        for table in suppression_order:
            try:
                cur.execute(f"TRUNCATE {table} CASCADE;")
                print(f"  ‚úì {table} vid√©e")
            except Exception as e:
                print(f"  ‚ö† {table}: {e}")
        
        # Commit des changements
        conn.commit()
        print("")
        
        # 4. V√©rifier l'√©tat APR√àS suppression
        print("üìä √âTAT APR√àS SUPPRESSION:")
        print("-" * 30)
        
        for table in tables:
            try:
                cur.execute(f"SELECT COUNT(*) as count FROM {table};")
                count = cur.fetchone()['count']
                print(f"  {table}: {count} lignes")
            except:
                print(f"  {table}: table non trouv√©e")
        
        print("")
        
        # 5. Garder les donn√©es de structure (teachers, classes, time_slots)
        print("üìã DONN√âES DE STRUCTURE CONSERV√âES:")
        print("-" * 40)
        print("  ‚úì teachers (liste des professeurs)")
        print("  ‚úì classes (liste des classes)")  
        print("  ‚úì time_slots (cr√©neaux horaires)")
        print("")
        print("‚ùå DONN√âES SUPPRIM√âES:")
        print("-" * 20)
        print("  ‚ùå teacher_load (charge des profs)")
        print("  ‚ùå solver_input (donn√©es du solveur)")
        print("  ‚ùå schedules (emplois du temps)")
        print("  ‚ùå constraints (contraintes)")
        print("")
        
        print("‚úÖ REMISE √Ä Z√âRO TERMIN√âE!")
        print("")
        print("üöÄ PROCHAINES √âTAPES:")
        print("1. R√©importer les donn√©es depuis Excel")
        print("2. Reconstruire solver_input proprement")
        print("3. Tester la g√©n√©ration par petites √©tapes")
        
        cur.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

