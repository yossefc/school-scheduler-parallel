# ───────────  School-Scheduler – stack complet  ───────────
# version: supprimée (obsolète avec Docker Compose v2)

services:
  # -------- Base de données PostgreSQL --------
  postgres:
    image: postgres:15
    container_name: school_db           # ex-school_db / school_db_dev
    environment:
      POSTGRES_DB: school_scheduler
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: school123
    ports: [ "5432:5432" ]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d   # scripts init
    networks: [ school_network ]

  # -------- Redis (cache / sessions AI) --------
  redis:
    image: redis:7-alpine
    container_name: school_redis
    command: redis-server --appendonly yes
    ports: [ "6379:6379" ]
    volumes: [ redis_data:/data ]
    networks: [ school_network ]
    restart: unless-stopped

  # -------- n8n (automatisation) --------
  n8n:
    image: n8nio/n8n
    container_name: school_n8n
    ports: [ "5678:5678" ]
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: n8n123
      N8N_HOST: localhost
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      WEBHOOK_URL: http://localhost:5678/
    volumes:
      - n8n_data:/home/node/.n8n
      - ./exports:/exports
    networks: [ school_network ]
    depends_on: [ postgres ]

  # -------- Solveur CP-SAT --------
  solver:
    build: ./solver
    container_name: school_solver
    ports: [ "8000:8000" ]
    environment:
      DATABASE_URL: postgresql://admin:school123@postgres:5432/school_scheduler
    volumes:
      - ./solver:/app
      - ./logs:/logs
    depends_on: [ postgres ]
    networks: [ school_network ]

  # -------- Agent IA (Flask + Socket.IO) --------
  ai_agent:
    build:
      context: ./scheduler_ai           # Build depuis scheduler_ai/
      dockerfile: Dockerfile.simple     # Version simplifiée sans problèmes d'imports
    container_name: school_ai_agent
    ports: [ "5001:5001" ]
    environment:
      FLASK_ENV: production             # ou development
      DB_HOST: postgres
      DB_NAME: school_scheduler
      DB_USER: admin
      DB_PASSWORD: school123
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-dummy}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-claude-dummy}
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: INFO
    volumes:
      - ./scheduler_ai:/app                 # Structure plate simple
      - ./logs:/logs
    depends_on: [ postgres, redis ]
    networks: [ school_network ]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # -------- Frontend React --------
  ai_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:8000
        REACT_APP_AI_SOCKET_URL: http://localhost:5001
    container_name: school_ai_frontend
    ports: [ "3001:3000" ]
    environment:
      NODE_ENV: development
      WDS_SOCKET_HOST: localhost
      WDS_SOCKET_PORT: 3001
      WDS_SOCKET_PATH: /ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on: [ ai_agent ]
    networks: [ school_network ]
    restart: unless-stopped

  # -------- Monitoring optionnel --------
  prometheus:
    image: prom/prometheus:latest
    container_name: school_prometheus
    ports: [ "9090:9090" ]
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks: [ school_network ]
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: school_grafana
    ports: [ "3002:3000" ]
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on: [ prometheus ]
    networks: [ school_network ]
    restart: unless-stopped

# ───────────  Volumes persistants  ───────────
volumes:
  postgres_data:
  n8n_data:
  redis_data:
  prometheus_data:
  grafana_data:

# ───────────  Réseau commun  ───────────
networks:
  school_network:
    driver: bridge