######################## DOCKERFILE SIMPLIFIÉ ############################
# Version alternative qui évite les problèmes de structure Python
# Build context: racine du projet (où se trouve docker-compose.yml)
##########################################################################

ARG PYTHON_VERSION=3.11-slim
FROM python:${PYTHON_VERSION} AS base
RUN apt-get update && apt-get install -y ca-certificates curl dnsutils iputils-ping && update-ca-certificates

# ---------- Utilisateur non-root ---------------------------------------
ENV USER=aiuser
RUN useradd -ms /bin/bash ${USER}

# ---------- Proxy optionnel --------------------------------------------
ARG HTTP_PROXY
ARG HTTPS_PROXY
ENV HTTP_PROXY=${HTTP_PROXY} \
    HTTPS_PROXY=${HTTPS_PROXY}

# ---------- Dépendances système ----------------------------------------
RUN apt-get update && apt-get install -y --no-install-recommends \
        curl postgresql-client netcat-openbsd \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# ---------- Répertoire de travail --------------------------------------
WORKDIR /app

# ---------- Dépendances Python ------------------------------------------
COPY requirements.txt ./requirements.txt
RUN pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir eventlet gunicorn psycopg2-binary

# ---------- Code de l'application ---------------------------------------
# CORRECTIF: Copier le contenu courant directement dans /app
COPY . ./
# S'assurer que __init__.py existe pour faire de /app un package Python
RUN touch __init__.py

# ---------- Script d'entrée --------------------------------------------
# Le fichier est maintenant dans /app/docker-entrypoint.sh
RUN chmod +x docker-entrypoint.sh

# ---------- Permissions ------------------------------------------------
RUN mkdir -p /logs /app/data \
 && chown -R ${USER}:${USER} /app /logs /app/data

# ---------- Variables d'environnement ----------------------------------
ENV PYTHONPATH=/app \
    FLASK_ENV=production \
    PYTHONUNBUFFERED=1 \
    LOG_FILE=/logs/scheduler_ai.log \
    PORT=5001

# ---------- Port & Healthcheck ------------------------------------------
EXPOSE ${PORT}
HEALTHCHECK --interval=30s --timeout=3s --start-period=15s --retries=3 \
  CMD curl -f http://localhost:${PORT}/health || exit 1

# ---------- Utilisateur final -------------------------------------------
USER ${USER}

# ---------- Commandes ---------------------------------------------------
ENTRYPOINT ["bash", "/app/docker-entrypoint.sh"]
# CORRECTIF: Utiliser api:app car les fichiers sont directement dans /app
CMD ["gunicorn", "-k", "eventlet", "-w", "1", "api:app", "-b", "0.0.0.0:5001", "--log-level", "info"] 
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
